version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.3
  kubernetes: circleci/kubernetes@1.3.1
  aws-eks: circleci/aws-eks@2.2.0

parameters:
  # This parameter is used to trigger the main workflow
  trigger:
    type: boolean
    default: true

executors:
  base:
    docker:
      - image: cimg/base:2022.10
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    resource_class: small

jobs:
  build:
    executor: base

    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/install
      - run:
          name: Build
          command: |
            chmod +x .circleci/setup_env.sh && source .circleci/setup_env.sh
            docker build -t $APP . -f deploy/api/Dockerfile
      - run:
          name: Upload
          command: |
            chmod +x .circleci/setup_env.sh && source .circleci/setup_env.sh
            aws ecr get-login-password --region cn-northwest-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.cn-northwest-1.amazonaws.com.cn
            docker tag $APP:latest $AWS_ACCOUNT_ID.dkr.ecr.cn-northwest-1.amazonaws.com.cn/$APP:$ENV
            docker push $AWS_ACCOUNT_ID.dkr.ecr.cn-northwest-1.amazonaws.com.cn/$APP:$ENV
      - run:
          name: Check Vulnerability Scan
          command: |
            chmod +x .circleci/setup_env.sh && source .circleci/setup_env.sh
            aws ecr wait image-scan-complete --repository-name $APP --image-id imageTag=$ENV --region cn-northwest-1
            aws ecr describe-image-scan-findings --repository-name $APP --image-id imageTag=$ENV --region cn-northwest-1 | grep -q "\"findings\": \[\]"

  deploy:
    executor: base

    steps:
      - checkout
      - kubernetes/install-kubectl
      - aws-eks/install-aws-iam-authenticator
      - aws-cli/install
      - run:
          name: Update kubeconfig
          command: |
            chmod +x .circleci/setup_env.sh && source .circleci/setup_env.sh
            aws eks --region=cn-northwest-1  update-kubeconfig --name=$CLUSTER_NAME
      - run:
          name: Kube apply
          command: |
            chmod +x .circleci/setup_env.sh && source .circleci/setup_env.sh
            sed -i "s@<APP>@$APP@g" ./deploy/api/k8s_deployment.yaml
            sed -i "s@<ENV>@$ENV@g" ./deploy/api/k8s_deployment.yaml
            sed -i "s@<DATE>@`date +%s`@g" ./deploy/api/k8s_deployment.yaml
            sed -i "s@<DOMAIN_PREFIX>@$DOMAIN_PREFIX@g" ./deploy/api/k8s_deployment.yaml
            sed -i "s@<AWS_ACCOUNT_ID>@$AWS_ACCOUNT_ID@g" ./deploy/api/k8s_deployment.yaml
            sed -i "s@<AWS_ACCESS_KEY_ID>@$GO_APP_AWS_ACCESS_KEY_ID@g" ./deploy/api/k8s_deployment.yaml
            sed -i "s@<AWS_SECRET_ACCESS_KEY>@$GO_APP_AWS_SECRET_ACCESS_KEY@g" ./deploy/api/k8s_deployment.yaml

            kubectl apply -f ./deploy/api/k8s_deployment.yaml --namespace=$ENV
            kubectl rollout status deployment/$APP-$ENV --namespace=$ENV

workflows:

  ci:
    jobs:
      - build:
          context:
            - dockerhub
            - aws
          filters:
            branches:
              only:
                - qa
                - demo
                - develop
                - main
                - preprod
      - deploy:
          context:
            - dockerhub
            - aws
          requires:
            - build
          filters:
            branches:
              only:
                - qa
                - demo
                - develop
                - main
                - preprod
